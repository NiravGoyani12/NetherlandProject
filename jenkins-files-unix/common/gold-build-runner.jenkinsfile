properties([
        [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '45', numToKeepStr: '20']],
        parameters([
                choice(name: 'brand', choices: ['ck', 'th'], description: 'Brand'),
	        choice(name: 'driverName', choices: ['remote-chrome', 'remote-firefox', 'remote-chrome-mobile-simulator', "remote-chrome-tablet-simulator", "remote-android", "remote-ios", "remote-chrome-zalenium", "remote-microsoft-edge"], description: 'The driver will be used in test'),
	        choice(name: 'platform', choices: ['desktop', 'mobile', 'tablet'], description: 'The driver will be used in test'),
                string(name: 'testLocale', description: 'The default local against', defaultValue: 'uk'),
                string(name: 'spaLocale', description: 'The default spa locale', defaultValue: 'be'),
                string(name: 'spaLangCode', description: 'The default spa lang code. Change it to "default" if your spa locale is single language', defaultValue: 'FR'),
		choice(name: 'multiLangDefaultLocale', choices: ['ch', 'be', 'lu', 'ru', 'de', 'nl'], description: 'Default multi language locale'),
		choice(name: 'multiLangDefaultLangCode', choices: ['FR', 'IT', 'DE', 'EN'], description: 'Secondary language for default multi language locale'),
		choice(name: 'mainRedirectPage', choices: ['wlp', 'home-page', 'glp', 'plp', 'pdp', 'search-plp', 'shopping-bag', 'content-page', 'store-locator', 'performance-page'], description: 'Default redirect page'),
                choice(name: 'testEnvironment', choices: ['prod-stag', 'b2ceuup', 'b2ceusp', 'systestp', 'systests', 'devtestp1', 'devtests1', 'devtestp', 'devtests', 'b2ceuus', 'preprod-live', 'preprod-stag'], description: 'The product environment'),
		choice(name: 'testDBConfigName', choices: ['prod-stag', 'uat-prod', 'db0-live', 'db0-stag', 'db1-live', 'db1-stag', 'systest-prod', 'systest-stag', 'sit-prod', 'uat-stag', 'preprod-live', 'preprod-stag'], description: 'DB Selection'),
                string(name: 'runTags', description: 'Tags to include: Scope/Functionality + Device + Browser', defaultValue: '@FullRegression and @Desktop and @Chrome and @RCTest and not @ExcludeProdStag'),
		string(name: 'runner', description: 'Count of runner', defaultValue: '15'),
                string(name: 'poolSize', description: 'The maximize pool size, if it is real device test', defaultValue: '15'),
                string(name: 'maxTestPerSession', description: 'The maximum number of tests per session', defaultValue: '50'),
                string(name: 'poolSessionIdleTimeout', description: 'The timeout for idle session within pool, in seconds', defaultValue: '10'),
	        choice(name: 'immediateRerun', choices: ['disable', 'enable'], description: 'Enable/disable rerun inside the job'),
	        choice(name: 'smartRerun', choices: ['disable', 'enable'], description: 'Enable/disable smart rerun. In case main run finishes with <70%, immediate rerun will not be triggered'),
                choice(name: 'rerunProjectName', choices: ['', 'ecom-runner', 'eCom_Gold_Build_Runner', 'eCom_CK_Desktop_Chrome_Daily', 'eCom_TH_Desktop_Chrome_Daily', 'eCom_CK_Mobile_Chrome_Daily', 'eCom_TH_Mobile_Chrome_Daily', 'eCom_CK_Android_Chrome_Daily', 'eCom_TH_Android_Chrome_Daily', 'eCom_CK_Desktop_FireFox_Daily', 'eCom_TH_Desktop_FireFox_Daily'], description: 'Specify job name you want to rerun, leave empty if no rerun'),
		string(name: 'rerunBuildNumber', description: 'Specify build number to rerun, leave empty if no rerun', defaultValue: ''),
	        choice(name: 'xrayReport', choices: ['disable', 'enable'], description: 'Enable/disable jira automated test execution report'),
                booleanParam(name: 'sendMsTeamsNotifications', defaultValue: false, description: 'Send Ms-Teams notifications'),
                gitParameter(branch: '',
                     branchFilter: 'origin/(.*)',
                     defaultValue: 'master',
                     description: 'Select remote branch to checkout. Default branch is master',
                     name: 'BRANCH',
                     quickFilterEnabled: false,
                     selectedValue: 'NONE',
                     sortMode: 'NONE',
                     tagFilter: '*',
                     type: 'PT_BRANCH')
    ])
])

node('master') {
        def msTeamsWebhookUrl = "https://pvhcorp.webhook.office.com/webhookb2/6e99a471-65a8-4b4e-b1f7-5e444e46b0cd@50ccd526-f6e9-4d12-8d35-391b59f63cd6/IncomingWebhook/da76bbd111b84a62acda2d7f85c97821/96bb192c-3d67-4d80-b882-92210a27dd48"
        def otherMsTeamsWebhookUrl = "https://pvhcorp.webhook.office.com/webhookb2/6e99a471-65a8-4b4e-b1f7-5e444e46b0cd@50ccd526-f6e9-4d12-8d35-391b59f63cd6/IncomingWebhook/f2d8e47f3c2b4ad09ca762d7a1a434e9/96bb192c-3d67-4d80-b882-92210a27dd48"
        def buildUrl = "https://10.34.14.54/view/job/eCom_Gold_Build_Runner/"
	def brand = params.brand ? params.brand.trim().replace(' ', '')  : "th"
        def driverName = params.driverName ? params.driverName.trim().replace(' ', '')  : "remote-chrome"
        def platform = params.platform ? params.platform.trim().replace(' ', '') : "desktop"
        def runTags = params.runTags ? params.runTags.trim() : "@FullRegression and @Desktop and @Chrome and @RCTest and not @ExcludeProdStag"
        def testEnvironment = params.testEnvironment ? params.testEnvironment.trim().replace(' ', '') : "prod-stag"
        def testLocale = params.testLocale ? params.testLocale.trim().replace(' ', '') : "uk"
        def spaLocale = params.spaLocale ? params.spaLocale.trim().replace(' ', '') : "be"
        def spaLangCode = params.spaLangCode ? params.spaLangCode.trim().replace(' ', '') : "default"
        def multiLangDefaultLocale = params.multiLangDefaultLocale ? params.multiLangDefaultLocale.trim().replace(' ', '') : "ch"
        def multiLangDefaultLangCode = params.multiLangDefaultLangCode ? params.multiLangDefaultLangCode.trim().replace(' ', '') : "FR"
        def mainRedirectPage = params.mainRedirectPage ? params.mainRedirectPage.trim().replace(' ', '') : "wlp"
	def testDBConfigName = params.testDBConfigName ? params.testDBConfigName.trim().replace(' ', '') : "prod-stag"
	def runner = params.runner ? params.runner.trim().replace(' ', '') : "12"
        def poolSize = params.poolSize ? params.poolSize.trim().replace(' ','') : "15"
        def poolSessionIdleTimeout = params.poolSessionIdleTimeout ? params.poolSessionIdleTimeout.trim().replace(' ','') : "10"
        def maxTestPerSession = params.maxTestPerSession ? params.maxTestPerSession.trim().replace(' ','') : "50"
        def enableImmediateRerun = params.immediateRerun ? immediateRerun == "enable" : false
        def enableSmartRerun = params.smartRerun ? smartRerun == "enable" : false
        def rerunProjectName = params.rerunProjectName ? params.rerunProjectName.trim().replace(' ', '') : ""
        def rerunBuildNumber = params.rerunBuildNumber ? params.rerunBuildNumber.trim().replace(' ', '') : ""
        def enableXrayReport = params.xrayReport ? xrayReport == "enable" : false
        def sendMsTeamsNotifs = params.sendMsTeamsNotifications
        def profile = "prod"
        if (driverName == "remote-android") {
            poolSize = runner
        }
        def envStr = "Brand=${brand} DriverName=${driverName} Platform=${platform} DatabaseName=${testDBConfigName} Site=${testEnvironment} DefaultLocale=${testLocale} SpaDefaultLocale=${spaLocale} SpaDefaultLangCode=${spaLangCode} MultiLangDefaultLocale=${multiLangDefaultLocale} MultiLangDefaultLangCode=${multiLangDefaultLangCode} MainRedirectPage=${mainRedirectPage} CUCUMBER_PARALLEL=true DriverPoolSize=${poolSize} SessionIdleTimeout=${poolSessionIdleTimeout} SessionMaxTest=${maxTestPerSession}"

        if (rerunProjectName && rerunBuildNumber) {
            runTags = "@execute.txt"
            profile = "rerun"
        } else {
            runTags = "--tags \"${runTags}\""
        }

        stage('Check out') {
                checkout scm
        }

        def setupStages = load 'pipeline-scripts-unix/setup.groovy'
        def testRunStates = load 'pipeline-scripts-unix/test-run.groovy'
        def xrayStages = load 'pipeline-scripts-unix/reports/x-ray-report.groovy'
        def msTeams = load 'pipeline-scripts-unix/reports/ms-teams-report.groovy'
        def email = load 'pipeline-scripts-unix/reports/email-report.groovy'

        if (sendMsTeamsNotifs) {
          msTeams.sendRunnersTaken(otherMsTeamsWebhookUrl, runner, platform, driverName, buildUrl)
        }

        setupStages.initProject(rerunProjectName, rerunBuildNumber)

        setupStages.lint()

        setupStages.buildProject()

        testRunStates.runIntegrationTest(runner, profile, runTags, envStr, false, msTeamsWebhookUrl, false, enableImmediateRerun, enableSmartRerun, "${brand.toUpperCase()} Runner - ", msTeams, email)
        
        if (enableXrayReport) {
          xrayStages.generateXrayReport(runTags, envStr, rerunProjectName, rerunBuildNumber, buildUrl)
        }

        if (sendMsTeamsNotifs) {
          msTeams.sendAllureReportLink(otherMsTeamsWebhookUrl, buildUrl)
        }
        
}

